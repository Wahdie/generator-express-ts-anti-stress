<%_
  const modelName = model.name;
  const varName = modelName.charAt(0).toLowerCase() + modelName.slice(1);
  const requiredFields = Object.entries(model.fields).filter(([name, field]) => field.required);
  const uniqueFields = Object.entries(model.fields).filter(([name, field]) => field.unique);
  const allFields = Object.keys(model.fields);
  const pkField = Object.keys(model.fields).find(field => model.fields[field].primaryKey);
  const nonPKFields = Object.keys(model.fields).filter(field => !model.fields[field].primaryKey);
  const fkFields = Object.keys(model.fields).filter(field => model.fields[field].foreignKey);
%>

import { Request, Response, NextFunction } from 'express';
import <%- modelName %> from '../models/<%- modelName %>';
<% if (model.relations) { %><% Object.values(model.relations).forEach(rel => { %>
import <%- rel.model%> from '../models/<%- rel.model %>';
  <% }) %>
<% } %>

export const <%- modelName %>Controller = {
  getAll: async (req: Request, res: Response, next: NextFunction) => {
    try {
      const data = await <%- modelName %>.find()<% if (model.relations) { %>
        .populate([
          <% Object.entries(model.relations).forEach(([relName, relObj], index, arr) => { %>
          { path: '<%- relName %>' }<%= index < arr.length - 1 ? ',' : '' %>
          <% }) %>
        ])<% } %>;
      res.json(data);
    } catch (err) {
      next(err);
    }
  },


  getById: async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { id } = req.params;
      if (!id) {
        res.status(400).json({ message: 'ID is required' });
        return;
      }
      const data = await <%- modelName %>.findById(id<% if (model.relations) { %>).populate([
          <% Object.entries(model.relations).forEach(([relName, relObj], index, arr) => { %>{ path: '<%- relName %>' }<%= index < arr.length - 1 ? ',' : '' %><% }) %>
        ])<% } %>;
      if (!data) {
        res.status(404).json({ message: '<%- modelName %> not found' });
        return;
      }
      res.json({
        status: 'success',
        data: { <%- varName %>: data }
      });
    } catch (err) {
      next(err);
    }
  },

  create: async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { <%- nonPKFields.join(', ') %> } = req.body;
      <% requiredFields.forEach(([name]) => { %>
      if (!<%- name %>) {
        res.status(400).json({ message: '<%- name %> is required' });
        return;
      }
      <% }); %>

      <% uniqueFields.forEach(([name]) => { %>
      const existingData = await <%- modelName %>.findOne({ <%- name %> });
      if (existingData) {
        res.status(409).json({ message: '<%- name %> already exists' });
        return;
      }
      <% }); %>
      <% Object.entries(model.fields).forEach(([fieldName, field]) => { if (field.foreignKey && field.references) {const referencedModel = field.references.split('.')[0]; %>
      if (<%- fieldName %>) {
        const <%- referencedModel.toLowerCase() %> = await <%- referencedModel %>.findById(<%- fieldName %>);
        if (!<%- referencedModel.toLowerCase() %>) {
          res.status(404).json({ message: '<%- referencedModel %> not found' });
          return;
        }
      }
      <%   }
      }); %>

      const newData = new <%- modelName %>({ <%- nonPKFields.join(', ') %> });
      await newData.save();

      res.status(201).json({
        status: 'success',
        data: { <%- varName %>: newData }
      });
    } catch (err) {
      next(err);
    }
  },

  update: async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { id } = req.params;
      if (!id) {
        res.status(400).json({ message: 'ID is required' });
        return;
      }

      const { <%- nonPKFields.join(', ') %> } = req.body;

      <% requiredFields.forEach(([name]) => { %>
      if (!<%- name %>) {
        res.status(400).json({ message: '<%- name %> is required' });
        return;
      }
      <% }); %>

      const data = await <%- modelName %>.findById(id);
      if (!data) {
        res.status(404).json({ message: '<%- modelName %> not found' });
        return;
      }

      <% uniqueFields.forEach(([name]) => { %>
      const existingData = await <%- modelName %>.findOne({ <%- name %> });
      if (existingData && existingData.id.toString() !== id) {
        res.status(409).json({ message: '<%- name %> already exists' });
        return;
      }
      <% }); %>

      <% Object.entries(model.fields).forEach(([fieldName, field]) => { if (field.foreignKey && field.references) { const referencedModel = field.references.split('.')[0]; %>
      if (<%- fieldName %>) {
        const <%- referencedModel.toLowerCase() %> = await <%- referencedModel %>.findById(<%- fieldName %>);
        if (!<%- referencedModel.toLowerCase() %>) {
          res.status(404).json({ message: '<%- referencedModel %> not found' });
          return;
        }
      }
      <%   }
      }); %>

      <% nonPKFields.forEach((field) => { %>
      data.<%- field %> = <%- field %>;
      <% }); %>
      await data.save();

      res.json({
        status: 'success',
        data: { <%- varName %>: data }
      });
    } catch (err) {
      next(err);
    }
  },

  delete: async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { id } = req.params;
      if (!id) {
        res.status(400).json({ message: 'ID is required' });
        return;
      }

      const data = await <%- modelName %>.findById(id);
      if (!data) {
        res.status(404).json({ message: '<%- modelName %> not found' });
        return;
      }

      await data.deleteOne();

      res.status(204).json({
        status: 'success',
        message: '<%- modelName %> deleted successfully'
      });
    } catch (err) {
      next(err);
    }
  }
};
